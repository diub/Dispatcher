<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// 
// ArrayCompare - © Copyright diub - Dipl.-Ing. Uwe Barth - 2019-11-02
// 
// Vergleiche für 'Unmanaged Type'-Arrays via Pointer auf UInt32; ein "Length-Missmatch" wird ausgeglichen.
//
// 'Unmanaged-Type' sind: sbyte, byte, short, ushort, int, uint, long, ulong, char, float, double, decimal, bool
//

using System;
using System.Threading;
using System.Reflection;

namespace diub.Unmanaged {

	static public partial class CompareArray {

<#
	string [] types = new string [] {"sbyte", "byte", "short", "ushort", "int", "uint", "long", "ulong", "char", "float", "double", "decimal","bool"};

    foreach (string item in types) {
#>

		/// <summary>
		/// Vergleicht Arrays vom Typ '<#=item#>'.
		/// </summary>
		/// <param name="Left">Linkes/Erstes Array für Vergleich.</param>
		/// <param name="LeftStart">Startpunkt innerhalb des linken Array.</param>
		/// <param name="Right">Rechtes/Zweites Array für Vergleich.</param>
		/// <param name="RightStart">Startpunkt innerhalb des rechten Array.</param>
		/// <param name="Length">Anzahl der zu vergleichenden Elemente.</param>
		/// <returns>True: falls vollständig gleich; sonst False.</returns>
		unsafe static public bool Compare (this <#=item#> [] Left, Int32 LeftStart, <#=item#> [] Right, Int32 RightStart, Int32 Length) {
			return CompareUnmanaged<<#=item#>> (Left, LeftStart, Right, RightStart, Length);
		}
<#
	}
#>

	}	// class

}	//	namespace	2019-11-02 - 14.48.53