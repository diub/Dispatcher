<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// 
// Runner - © Copyright diub - Dipl.-Ing. Uwe Barth - 2019-03-03
// 
// Allows you to start almost any function directly in its own thread and retrieve the result synchronized later.
//
using System;
using System.Threading;

namespace diub.Threads {

		
	/// <summary>
	/// Erlaubt es nahezu beliebige Funktionen direkt in einem eigenen Thread zu starten und das Ergebnis später
	/// synchronisiert abzurufen.
	/// </summary>
	public partial class Runner {

		// Action: syntactic special case, since no parameter
	
		// Static Action for easy and safe call
		static public Run Action(Action Action) {
			return (new RunAction(Action));
		}	

		// Function; syntactic special case, since no parameter

		// Static Function for easy and safe call
		static public Run<RT> Func<RT>(Func<RT> Function) {
			return (new RunFunc<RT>(Function));
		}
	
	<#
		string cl = "";
		string clt = "";
		string ins = "";
		string vars = "";
		string svars = "";

		for (int i = 0; i<16; i++) {
			cl += "In" + i.ToString() + ",";
			clt = cl.Trim(',');
			ins += ", In" + i.ToString() + " Inv" + i.ToString(); 
			vars += "inv" + i.ToString() + ",";
			svars += "Inv" + i.ToString() + ",";
	#>
	// Action with <#=(i+1).ToString()#> parameter(s)
		// Static Action for easy and safe call
		static public Run Action<<#=cl.TrimEnd(',')#>>(Action<<#=cl.TrimEnd(',')#>> Function<#=ins#>) {
			return (new RunAction<<#=cl.TrimEnd(',')#>>(Function,<#=svars.TrimEnd(',')#>));
		}
	
		// Function with <#=(i+1).ToString()#> parameter(s)
		// Static Function for easy and safe call
		static public Run<RT> Func<<#=cl#>RT>(Func<<#=cl#>RT> Function<#=ins#>) {
			return (new RunFunc<<#=cl#>RT>(Function, <#=svars.TrimEnd(',')#>));
		}
	
	<#
		}
	#>
}
}	//	namespace	2019-03-01 - 16.30.38