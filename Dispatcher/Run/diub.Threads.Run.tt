<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// 
// Run - © Copyright diub - Dipl.-Ing. Uwe Barth - 2019-03-03
// 
// Allows you to start almost any function directly in its own thread and retrieve the result synchronized later.
//
using System;
using System.Threading;

namespace diub.Threads {

/// <summary>
/// Erlaubt es nahezu beliebige Funktionen direkt in einem eigenen Thread zu starten und das Ergebnis später
/// synchronisiert abzurufen.
/// </summary>

	/// <summary>
	/// Synchronization Object for Action.
	/// </summary>	
	public class Run {
		protected Thread thread;
		protected bool completed = false;

		public void Wait (){
			if (!completed) {
				if (thread == null)
					throw new Exception ("Thread is not created (null)!");
				if(	thread.ThreadState == ThreadState.Unstarted)
					throw new Exception ("Thread is not runned!");
				try {
					thread.Join ();
				} catch (Exception) {}
				completed = true;
			}
		}
	}	//	Run


	/// <summary>
	/// Synchronization Object for Func and getting the result.
	/// </summary>	
	public class Run<RT> : Run {
		protected RT return_value;

		public RT Result {
			get {
				Wait ();
				return return_value;
			}
		}
	}	//	Run

	// Action; syntactic special case, since no parameter
	public class RunAction : Run {		
		readonly private Action action;

		public RunAction (Action Action) {
			action = Action;
			(thread = new Thread (DoIt)).Start ();
		}

		private void DoIt () {
			action ();
		}
	}   // Action

	// Function; syntactic special case, since no parameter
	public class RunFunc<RT> : Run<RT>  {		
		readonly private Func<RT> function;

		public RunFunc (Func<RT> Function) {
			function = Function;
			(thread = new Thread (DoIt)).Start ();
		}

		private void DoIt () {
			return_value = function ();
		}
	}   // Function

<#
	string cl = "";
	string clt = "";
	string ins = "";
	string vars = "";
	string svars = "";

	for (int i = 0; i<16; i++) {
		cl += "In" + i.ToString() + ",";
		clt = cl.Trim(',');
		ins += ", In" + i.ToString() + " Inv" + i.ToString(); 
		vars += "inv" + i.ToString() + ",";
		svars += "Inv" + i.ToString() + ",";
#>
	// Action with <#=(i+1).ToString()#> parameter(s)
	public class RunAction<<#=clt#>> : Run {
		readonly private Action<<#=clt#>> action;
	<#for (int n=0; n<=i; n++) {#>
	readonly In<#=n#> inv<#=n#>;
	<#}#>

		public RunAction (Action<<#=clt#>> Action <#=ins#>) {
			action = Action;
	<#for (int n=0; n<=i; n++) {#>
		inv<#=n#> = Inv<#=n#>;
	<#}#>
		(thread = new Thread (DoIt)).Start();
		}
		
		public void DoIt () {
			action (<#=vars.TrimEnd(',')#>);
		}
	}	// Action

	// Function with <#=(i+1).ToString()#> parameter(s)
	public class RunFunc<<#=cl#>RT> : Run<RT> {
		readonly private Func<<#=cl#>RT> function;
	<#for (int n=0; n<=i; n++) {#>
	readonly In<#=n#> inv<#=n#>;
	<#}#>

		public RunFunc (Func<<#=cl#>RT> Function<#=ins#>) {
			function = Function;
	<#for (int n=0; n<=i; n++) {#>
		inv<#=n#> = Inv<#=n#>;
	<#}#>
		(thread = new Thread (DoIt)).Start();
		}
		
		private void DoIt () {
			return_value = function (<#=vars.TrimEnd(',')#>);
		}
	}	// Function 
	
<#
	}
#>

}	//	namespace	2019-03-01 - 16.30.38